
## 🚀 DEPLOYMENT SCRIPTS

### `scripts/deploy.sh`

```bash
#!/bin/bash

echo "🚀 Deploying Etincel to Production..."

# Pull latest code
git pull origin main

# Build Docker images
echo "📦 Building Docker images..."
docker-compose build

# Run database migrations
echo "🗄️  Running database migrations..."
docker-compose run --rm auth-service npx prisma migrate deploy

# Start services
echo "🔄 Starting services..."
docker-compose up -d

# Wait for services to be healthy
echo "⏳ Waiting for services to be healthy..."
sleep 30

# Run health checks
echo "🏥 Running health checks..."
curl -f http://localhost:3001/health || exit 1
curl -f http://localhost:3002/health || exit 1
curl -f http://localhost:3003/health || exit 1
curl -f http://localhost:3004/health || exit 1
curl -f http://localhost:3005/health || exit 1

echo "✅ Deployment complete!"
echo "🌐 Application running at: https://etincel.app"
echo "🛠️  Admin dashboard: https://admin.etincel.app"
```

### `scripts/setup-ubuntu.sh`

```bash
#!/bin/bash

echo "🔧 Setting up Etincel on Ubuntu Server..."

# Update system
sudo apt update && sudo apt upgrade -y

# Install Docker
echo "🐳 Installing Docker..."
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker $USER

# Install Docker Compose
echo "📦 Installing Docker Compose..."
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Install Node.js
echo "📗 Installing Node.js..."
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt-get install -y nodejs

# Install Nginx
echo "🌐 Installing Nginx..."
sudo apt install -y nginx
sudo systemctl enable nginx

# Create SSL directory
sudo mkdir -p /etc/nginx/ssl

# Install certbot for SSL
sudo apt install -y certbot python3-certbot-nginx

# Clone repository
echo "📥 Cloning repository..."
git clone https://github.com/yourorg/etincel.git /opt/etincel
cd /opt/etincel

# Setup environment
echo "⚙️  Setting up environment..."
cp .env.example .env.production

echo "✅ Setup complete!"
echo "📝 Next steps:"
echo "1. Edit /opt/etincel/.env.production with your credentials"
echo "2. Run: cd /opt/etincel && bash scripts/deploy.sh"
echo "3. Setup SSL: sudo certbot --nginx -d etincel.app -d www.etincel.app"
```

### `scripts/init-minio.sh`

```bash
#!/bin/bash

echo "🪣 Initializing MinIO buckets..."

# Wait for MinIO to be ready
sleep 10

# Install mc (MinIO Client)
wget https://dl.min.io/client/mc/release/linux-amd64/mc
chmod +x mc
sudo mv mc /usr/local/bin/

# Configure mc
mc alias set minio http://localhost:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}

# Create buckets
mc mb minio/${MINIO_BUCKET}
mc mb minio/${MINIO_BUCKET}-thumbnails

# Set public policy for media
mc policy set download minio/${MINIO_BUCKET}

echo "✅ MinIO buckets created successfully!"
```

---

## 📋 COMPLETE MAKEFILE

```makefile
.PHONY: help install dev prod build test clean deploy

help:
	@echo "Etincel - Production Commands"
	@echo "=============================="
	@echo "make install       - Install all dependencies"
	@echo "make dev           - Start development environment"
	@echo "make prod          - Start production environment"
	@echo "make build         - Build all services"
	@echo "make test          - Run tests"
	@echo "make migrate       - Run database migrations"
	@echo "make seed          - Seed database"
	@echo "make deploy        - Deploy to production"
	@echo "make clean         - Clean containers and volumes"
	@echo "make logs          - View logs"
	@echo "make backup        - Backup database"

install:
	@echo "📦 Installing dependencies..."
	npm install
	cd services/auth-service && npm install && npx prisma generate
	cd services/profile-service && npm install && npx prisma generate
	cd services/match-service && npm install && npx prisma generate
	cd services/chat-service && npm install && npx prisma generate
	cd services/payment-service && npm install && npx prisma generate
	cd services/notification-service && npm install
	cd services/media-service && npm install
	cd services/analytics-service && npm install
	cd services/blockchain-service && npm install
	cd services/ai-service && pip install -r requirements.txt
	cd client/mobile-native && npm install
	cd client/mobile-web && npm install
	cd client/desktop-web && npm install
	cd admin-dashboard && npm install
	@echo "✅ Installation complete!"

dev:
	@echo "🚀 Starting development environment..."
	docker-compose -f docker-compose.dev.yml up --build

prod:
	@echo "🚀 Starting production environment..."
	docker-compose up -d --build

build:
	@echo "🔨 Building all services..."
	docker-compose build

migrate:
	@echo "🗄️  Running database migrations..."
	docker-compose run --rm auth-service npx prisma migrate deploy

seed:
	@echo "🌱 Seeding database..."
	docker-compose run --rm auth-service npm run seed

deploy:
	@echo "🚀 Deploying to production..."
	bash scripts/deploy.sh

clean:
	@echo "🧹 Cleaning up..."
	docker-compose down -v
	docker system prune -af
	@echo "✅ Cleanup complete!"

logs:
	docker-compose logs -f

backup:
	@echo "💾 Backing up database..."
	docker exec etincel-mongodb mongodump --out=/backup/$(date +%Y%m%d)
	@echo "✅ Backup complete!"

restart:
	@echo "🔄 Restarting services..."
	docker-compose restart

status:
	@echo "📊 Service status:"
	docker-compose ps
```

---

## 🎯 FINAL SETUP INSTRUCTIONS

### `DEPLOYMENT.md`

```markdown
# 🚀 Etincel - Production Deployment Guide

## Prerequisites
- Ubuntu 20.04+ server
- Domain name (etincel.app)
- 4GB+ RAM
- 50GB+ storage

## Step-by-Step Deployment

### 1. Initial Server Setup
```bash
# Run setup script
bash scripts/setup-ubuntu.sh
```

### 2. Configure Environment
```bash
cd /opt/etincel
nano .env.production

# Update all variables:
# - Database passwords
# - Stripe keys
# - API keys
# - Domain names
```

### 3. Setup SSL Certificates
```bash
sudo certbot --nginx -d etincel.app -d www.etincel.app -d admin.etincel.app -d api.etincel.app
```

### 4. Initialize MinIO
```bash
bash scripts/init-minio.sh
```

### 5. Deploy Application
```bash
make deploy
```

### 6. Verify Deployment
```bash
# Check all services are running
make status

# View logs
make logs
```

### 7. Setup Monitoring
- Access Grafana: http://your-server:3300
- Default credentials: admin/admin
- Import dashboards from monitoring/grafana/dashboards

## Post-Deployment

### Database Backup
```bash
# Setup daily backups
crontab -e
# Add: 0 2 * * * cd /opt/etincel && make backup
```

### SSL Auto-Renewal
```bash
# Certbot auto-renewal is enabled by default
sudo systemctl status certbot.timer
```

### Monitoring
- Prometheus: http://your-server:9090
- Grafana: http://your-server:3300
- MinIO Console: http://your-server:9001

## Troubleshooting

### Services not starting
```bash
docker-compose logs [service-name]
```

### Database connection issues
```bash
docker exec -it etincel-mongodb mongosh
```

### Clear cache
```bash
docker exec -it etincel-redis redis-cli FLUSHALL
```

## Support
- Documentation: https://docs.etincel.app
- Issues: https://github.com/yourorg/etincel/issues
```

---

## ✅ PROJECT COMPLETION CHECKLIST

### Backend Services ✅
- [x] Auth Service (JWT + OAuth + Biometric)
- [x] Profile Service (with Elasticsearch)
- [x] Match Service (AI-powered)
- [x] Chat Service (Socket.IO real-time)
- [x] Payment Service (Complete Stripe integration)
-# 🔥 Etincel - Complete Production-Ready Source Code

## 📁 Complete Project Structure

```
etincel/
├── .env.production
├── docker-compose.yml
├── docker-compose.dev.yml
├── nginx.conf
├── Makefile
├── package.json
├── prisma/schema.prisma
│
├── services/
│   ├── auth-service/
│   ├── profile-service/
│   ├── match-service/
│   ├── chat-service/
│   ├── payment-service/
│   ├── location-service/
│   ├── ai-service/
│   ├── blockchain-service/
│   ├── notification-service/
│   ├── media-service/
│   └── analytics-service/
│
├── client/
│   ├── mobile-native/
│   ├── mobile-web/
│   └── desktop-web/
│
├── admin-dashboard/
├── gateway/
├── infra/
└── scripts/
```

---

## 🔐 ROOT .env.production

```bash
# ===========================
# ETINCEL PRODUCTION CONFIG
# ===========================

# Database
DATABASE_URL="mongodb://admin:your-secure-password@mongodb:27017/etincel?authSource=admin"
REDIS_URL="redis://:your-redis-password@redis:6379"

# Elasticsearch
ELASTICSEARCH_URL="http://elasticsearch:9200"
ELASTICSEARCH_USERNAME="elastic"
ELASTICSEARCH_PASSWORD="your-elastic-password"

# MinIO (Local S3)
MINIO_ENDPOINT="http://minio:9000"
MINIO_ACCESS_KEY="minioadmin"
MINIO_SECRET_KEY="minio-secure-password-2024"
MINIO_BUCKET="etincel-media"
MINIO_USE_SSL=false

# Service Ports
AUTH_SERVICE_PORT=3001
PROFILE_SERVICE_PORT=3002
MATCH_SERVICE_PORT=3003
CHAT_SERVICE_PORT=3004
PAYMENT_SERVICE_PORT=3005
AI_SERVICE_PORT=8000
LOCATION_SERVICE_PORT=9000
NOTIFICATION_SERVICE_PORT=3006
MEDIA_SERVICE_PORT=3007
ANALYTICS_SERVICE_PORT=3008
WEBRTC_SERVICE_PORT=3009
BLOCKCHAIN_SERVICE_PORT=3010

# JWT
JWT_SECRET="your-super-secret-jwt-key-change-in-production-make-it-very-long-and-random"
JWT_EXPIRY="15m"
REFRESH_TOKEN_EXPIRY="7d"
JWT_ALGORITHM="HS256"

# Socket.IO
SOCKET_IO_CORS_ORIGIN="https://etincel.app,https://www.etincel.app,http://localhost:5173,http://localhost:3000"
SOCKET_IO_PORT=3004

# Stripe Payments
STRIPE_SECRET_KEY="sk_test_51Pn5Xh2eZvKYlo2C..."
STRIPE_PUBLISHABLE_KEY="pk_test_51Pn5Xh2eZvKYlo2C..."
STRIPE_WEBHOOK_SECRET="whsec_abc123def456ghi789..."
STRIPE_WEBHOOK_URL="https://api.etincel.app/api/v1/payments/webhook"

# Stripe Price IDs
STRIPE_PREMIUM_PRICE_ID="price_1Pn5Xh2eZvKYlo2CJqY6x4Rl"
STRIPE_GOLD_PRICE_ID="price_1Pn5Y52eZvKYlo2CR7oKd8kT"
STRIPE_TRUSTED_BADGE_PRICE_ID="price_1Pn5Zg2eZvKYlo2CmzFjG3Qy"
STRIPE_UNDO_SWIPE_PRICE_ID="price_1Pn5aD2eZvKYlo2CUbA7tLcB"
STRIPE_INCOGNITO_PRICE_ID="price_1Pn5bE2eZvKYlo2CwHf8O7iV"
STRIPE_SUPER_LIKE_PRICE_ID="price_1Pn5cF2eZvKYlo2CKpJ7dUWJ"
STRIPE_ROSE_GIFT_PRICE_ID="price_1Pn5dG2eZvKYlo2CxuY9pZ7s"
STRIPE_DIAMOND_GIFT_PRICE_ID="price_1Pn5eH2eZvKYlo2Cy5r2M8jF"
STRIPE_BOOST_PRICE_ID="price_1Pn5fI2eZvKYlo2CpQr3sT8u"
STRIPE_GEOFILTER_PRICE_ID="price_1Pn5gJ2eZvKYlo2CvYz4uW9v"

# ETI Token Economy (Polygon)
ETI_CONTRACT_ADDRESS="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
ETI_RPC_URL="https://polygon-rpc.com"
ETI_PRIVATE_KEY="your-wallet-private-key-here"
ETI_DECIMALS=18
ETI_SYMBOL="ETI"
ETI_PLATFORM_FEE_PERCENTAGE=15

# Blockchain
POLYGON_RPC_URL="https://polygon-rpc.com"
POLYGON_CHAIN_ID=137
NFT_CONTRACT_ADDRESS="0x..."
BLOCKCHAIN_PRIVATE_KEY="0xYourPrivateKey"

# Firebase FCM
FCM_SERVER_KEY="your-fcm-server-key"
FCM_PROJECT_ID="etincel-app"
FIREBASE_CLIENT_EMAIL="firebase-adminsdk@etincel-app.iam.gserviceaccount.com"
FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"

# Email (SendGrid)
SMTP_HOST="smtp.sendgrid.net"
SMTP_PORT=587
SMTP_USER="apikey"
SMTP_PASS="your-sendgrid-api-key"
EMAIL_FROM="noreply@etincel.app"

# Twilio SMS
TWILIO_ACCOUNT_SID="ACxxx"
TWILIO_AUTH_TOKEN="xxx"
TWILIO_PHONE_NUMBER="+1234567890"

# AI/ML Services
OPENAI_API_KEY="sk-xxx"
HUGGINGFACE_API_KEY="hf_xxx"

# AdMob
ADMOB_BANNER_ID="ca-app-pub-3940256099942544/6300978111"
ADMOB_INTERSTITIAL_ID="ca-app-pub-3940256099942544/1033173712"
ADMOB_REWARDED_ID="ca-app-pub-3940256099942544/5224354917"

# OAuth2
GOOGLE_CLIENT_ID="your-google-client-id"
GOOGLE_CLIENT_SECRET="your-google-client-secret"
FACEBOOK_APP_ID="your-facebook-app-id"
FACEBOOK_APP_SECRET="your-facebook-app-secret"
APPLE_CLIENT_ID="your-apple-client-id"
APPLE_TEAM_ID="your-apple-team-id"
APPLE_KEY_ID="your-apple-key-id"

# App URLs
FRONTEND_URL="https://etincel.app"
API_URL="https://api.etincel.app"
ADMIN_URL="https://admin.etincel.app"

# Feature Flags
FREEMIUM_DAILY_LIKES=100
ENABLE_BIOMETRIC_AUTH=true
ENABLE_VIDEO_CALLS=true
ENABLE_ETI_TOKENS=true
PLATFORM_TIP_FEE=0.15

# Node Environment
NODE_ENV=production
PORT=3000
```

---

## 🐳 docker-compose.yml (Production)

```yaml
version: '3.9'

services:
  # ===========================
  # DATABASES & STORAGE
  # ===========================
  
  mongodb:
    image: mongo:7.0
    container_name: etincel-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: etincel
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - etincel-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: etincel-redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - etincel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: etincel-elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - etincel-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: etincel-minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - etincel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================
  # API GATEWAY
  # ===========================

  nginx:
    image: nginx:alpine
    container_name: etincel-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - auth-service
      - profile-service
      - match-service
      - chat-service
      - payment-service
    networks:
      - etincel-network

  # ===========================
  # MICROSERVICES
  # ===========================

  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: etincel-auth-service
    restart: always
    ports:
      - "3001:3001"
    env_file:
      - .env.production
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - etincel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  profile-service:
    build:
      context: ./services/profile-service
      dockerfile: Dockerfile
    container_name: etincel-profile-service
    restart: always
    ports:
      - "3002:3002"
    env_file:
      - .env.production
    depends_on:
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - etincel-network

  match-service:
    build:
      context: ./services/match-service
      dockerfile: Dockerfile
    container_name: etincel-match-service
    restart: always
    ports:
      - "3003:3003"
    env_file:
      - .env.production
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - etincel-network

  chat-service:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile
    container_name: etincel-chat-service
    restart: always
    ports:
      - "3004:3004"
    env_file:
      - .env.production
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - etincel-network

  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: etincel-payment-service
    restart: always
    ports:
      - "3005:3005"
    env_file:
      - .env.production
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - etincel-network

  location-service:
    build:
      context: ./services/location-service
      dockerfile: Dockerfile
    container_name: etincel-location-service
    restart: always
    ports:
      - "9000:9000"
    env_file:
      - .env.production
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - etincel-network

  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    container_name: etincel-ai-service
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    volumes:
      - ./ai-engine/models:/app/models
    networks:
      - etincel-network

  blockchain-service:
    build:
      context: ./services/blockchain-service
      dockerfile: Dockerfile
    container_name: etincel-blockchain-service
    restart: always
    ports:
      - "3010:3010"
    env_file:
      - .env.production
    networks:
      - etincel-network

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: etincel-notification-service
    restart: always
    ports:
      - "3006:3006"
    env_file:
      - .env.production
    networks:
      - etincel-network

  media-service:
    build:
      context: ./services/media-service
      dockerfile: Dockerfile
    container_name: etincel-media-service
    restart: always
    ports:
      - "3007:3007"
    env_file:
      - .env.production
    depends_on:
      - minio
    networks:
      - etincel-network

  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: etincel-analytics-service
    restart: always
    ports:
      - "3008:3008"
    env_file:
      - .env.production
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - etincel-network

  webrtc-service:
    build:
      context: ./services/webrtc-service
      dockerfile: Dockerfile
    container_name: etincel-webrtc-service
    restart: always
    ports:
      - "3009:3009"
    env_file:
      - .env.production
    networks:
      - etincel-network

  # ===========================
  # FRONTEND APPS
  # ===========================

  mobile-web:
    build:
      context: ./client/mobile-web
      dockerfile: Dockerfile
    container_name: etincel-mobile-web
    restart: always
    ports:
      - "5173:80"
    networks:
      - etincel-network

  desktop-web:
    build:
      context: ./client/desktop-web
      dockerfile: Dockerfile
    container_name: etincel-desktop-web
    restart: always
    ports:
      - "3000:3000"
    env_file:
      - .env.production
    networks:
      - etincel-network

  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
    container_name: etincel-admin-dashboard
    restart: always
    ports:
      - "3100:80"
    networks:
      - etincel-network

  # ===========================
  # MONITORING
  # ===========================

  prometheus:
    image: prom/prometheus:latest
    container_name: etincel-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - etincel-network

  grafana:
    image: grafana/grafana:latest
    container_name: etincel-grafana
    restart: always
    ports:
      - "3300:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - etincel-network

volumes:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  etincel-network:
    driver: bridge
```

---

## 🌐 nginx.conf (Production)

```nginx
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml font/truetype font/opentype 
               application/vnd.ms-fontobject image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=10r/m;

    # Upstream services
    upstream auth_service {
        least_conn;
        server auth-service:3001 max_fails=3 fail_timeout=30s;
    }

    upstream profile_service {
        least_conn;
        server profile-service:3002 max_fails=3 fail_timeout=30s;
    }

    upstream match_service {
        least_conn;
        server match-service:3003 max_fails=3 fail_timeout=30s;
    }

    upstream chat_service {
        least_conn;
        server chat-service:3004 max_fails=3 fail_timeout=30s;
    }

    upstream payment_service {
        least_conn;
        server payment-service:3005 max_fails=3 fail_timeout=30s;
    }

    upstream location_service {
        least_conn;
        server location-service:9000 max_fails=3 fail_timeout=30s;
    }

    upstream ai_service {
        least_conn;
        server ai-service:8000 max_fails=3 fail_timeout=30s;
    }

    upstream blockchain_service {
        least_conn;
        server blockchain-service:3010 max_fails=3 fail_timeout=30s;
    }

    upstream media_service {
        least_conn;
        server media-service:3007 max_fails=3 fail_timeout=30s;
    }

    upstream analytics_service {
        least_conn;
        server analytics-service:3008 max_fails=3 fail_timeout=30s;
    }

    # Main API Gateway
    server {
        listen 80;
        server_name api.etincel.app;

        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name api.etincel.app;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/etincel.crt;
        ssl_certificate_key /etc/nginx/ssl/etincel.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Auth Service
        location /api/v1/auth {
            limit_req zone=auth_limit burst=20 nodelay;
            proxy_pass http://auth_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Profile Service
        location /api/v1/profiles {
            limit_req zone=api_limit burst=50 nodelay;
            proxy_pass http://profile_service;
            include /etc/nginx/proxy_params.conf;
        }

        # Match Service
        location /api/v1/matches {
            limit_req zone=api_limit burst=100 nodelay;
            proxy_pass http://match_service;
            include /etc/nginx/proxy_params.conf;
        }

        # Chat Service (Socket.IO)
        location /api/v1/chat {
            proxy_pass http://chat_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400;
        }

        # Payment Service (Stripe Webhooks)
        location /api/v1/payments {
            limit_req zone=api_limit burst=30 nodelay;
            proxy_pass http://payment_service;
            include /etc/nginx/proxy_params.conf;
            client_max_body_size 10M;
        }

        # Location Service
        location /api/v1/location {
            limit_req zone=api_limit burst=200 nodelay;
            proxy_pass http://location_service;
            include /etc/nginx/proxy_params.conf;
        }

        # AI Service
        location /api/v1/ai {
            limit_req zone=api_limit burst=50 nodelay;
            proxy_pass http://ai_service;
            include /etc/nginx/proxy_params.conf;
            proxy_read_timeout 300s;
        }

        # Blockchain Service
        location /api/v1/blockchain {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://blockchain_service;
            include /etc/nginx/proxy_params.conf;
        }

        # Media Service
        location /api/v1/media {
            limit_req zone=api_limit burst=50 nodelay;
            proxy_pass http://media_service;
            include /etc/nginx/proxy_params.conf;
            client_max_body_size 50M;
        }

        # Analytics Service
        location /api/v1/analytics {
            limit_req zone=api_limit burst=100 nodelay;
            proxy_pass http://analytics_service;
            include /etc/nginx/proxy_params.conf;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Frontend - Main App
    server {
        listen 80;
        server_name etincel.app www.etincel.app;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name etincel.app www.etincel.app;

        ssl_certificate /etc/nginx/ssl/etincel.crt;
        ssl_certificate_key /etc/nginx/ssl/etincel.key;

        location / {
            proxy_pass http://desktop-web:3000;
            include /etc/nginx/proxy_params.conf;
        }
    }

    # Admin Dashboard
    server {
        listen 80;
        server_name admin.etincel.app;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name admin.etincel.app;

        ssl_certificate /etc/nginx/ssl/etincel.crt;
        ssl_certificate_key /etc/nginx/ssl/etincel.key;

        # Admin IP whitelist (optional)
        # allow 203.0.113.0/24;
        # deny all;

        location / {
            proxy_pass http://admin-dashboard:80;
            include /etc/nginx/proxy_params.conf;
        }
    }
}
```

### `nginx/proxy_params.conf`

```nginx
proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection 'upgrade';
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_cache_bypass $http_upgrade;
proxy_read_timeout 60s;
proxy_connect_timeout 60s;
proxy_send_timeout 60s;
```

---
